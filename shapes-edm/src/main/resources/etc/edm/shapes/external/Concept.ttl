@prefix sh:   <http://www.w3.org/ns/shacl#> .
@prefix xsd:  <http://www.w3.org/2001/XMLSchema#> .
@prefix dct:  <http://purl.org/dc/terms/> .
@prefix dc:   <http://purl.org/dc/elements/1.1/> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix ore:  <http://www.openarchives.org/ore/terms/> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix rdaGr2: <http://rdvocab.info/ElementsGr2/> .
@prefix owl:  <http://www.w3.org/2002/07/owl#> .
@prefix edm:  <http://www.europeana.eu/schemas/edm/> .

@prefix esc:  <http://www.europeana.eu/schemas/edm/shapes/categories#> .
@prefix tpl:  <http://www.europeana.eu/schemas/edm/shapes/template#> .

@base             <http://www.europeana.eu/schemas/edm/shapes/external/> .
@prefix Concept:  <Concept#base> .

################################################################################
# Shape Graph for skos:Concept
################################################################################

<Concept>
  rdf:type owl:Ontology, sh:Graph ;
  owl:versionInfo "Draft version for skos:Concept Class"^^xsd:string ;
  sh:shapesGraph <http://www.w3.org/ns/shacl> ;
  sh:shapesGraph tpl: ;
.

################################################################################
# Base Shape for the skos:Concept Class
################################################################################

<Concept#base>
  a sh:Shape ;
  rdfs:subClassOf rdfs:Resource ;
  sh:description """This shape gathers all constraints that apply to a 
                    skos:Concept class""" ;

  sh:scopeClass skos:Concept ;

  # class level constraints
  sh:constraint      <Concept#closure> ;
  sh:constraint      <Concept#disjoint> ;

  # SKOS properties
  sh:property        <Concept/skos_prefLabel#type> ;
  sh:property        <Concept/skos_prefLabel#datatype> ;
  sh:property        <Concept/skos_prefLabel#cardinality> ;
  sh:property        <Concept/skos_altLabel#type> ;
  sh:property        <Concept/skos_altLabel#datatype> ;
  sh:property        <Concept/skos_altLabel#redundancy> ;
  sh:property        <Concept/skos_broader#type> ;
  sh:property        <Concept/skos_broader#range-class> ;
  sh:property        <Concept/skos_narrower#type> ;
  sh:property        <Concept/skos_related#type> ;
  sh:property        <Concept/skos_broadMatch#type> ;
  sh:property        <Concept/skos_narrowMatch#type> ;
  sh:property        <Concept/skos_relatedMatch#type> ;
  sh:property        <Concept/skos_exactMatch#type> ;
  sh:property        <Concept/skos_closeMatch#type> ;
  sh:property        <Concept/skos_note#type> ;
  sh:property        <Concept/skos_note#datatype> ;
  sh:property        <Concept/skos_notation#type> ;
  sh:constraint      <Concept/skos_notation#datatype> ;
  sh:property        <Concept/skos_inScheme#type> ;
.

# class level constraints ######################################################

<Concept#closure>
  sh:description """An skos:Concept resource must be defined using only the 
                    properties defined in EDM for Concepts""" ;
  dc:type esc:closure ;
  dc:relation "R-206-DEFINE-ALLOWED-NAMESPACES" ;
  sh:closed true ;
  sh:ignoredProperties (
    rdf:type
    skos:prefLabel skos:altLabel skos:broader skos:narrower skos:related
    skos:broadMatch skos:narrowMatch skos:relatedMatch
    skos:exactMatch skos:closeMatch skos:note skos:notation skos:inScheme
  ) ;
.

<Concept#disjoint>
  a tpl:DisjointConstraint ;
  dc:type esc:disjoint ;
  sh:description """The value set of properties skos:broader, skos:narrower,
                    skos:related, skos:broadMatch, skos:narrowMatch, 
                    skos:relatedMatch, skos:exactMatch, skos:closeMatch,
                    skos:broader must be disjoint""" ;
  dc:relation "R-10-DEFINE-DISJOINT-PROPERTIES" ;
  sh:disjointProperties (
    skos:broader skos:narrower skos:related
    skos:broadMatch skos:narrowMatch skos:relatedMatch
    skos:exactMatch skos:closeMatch
  );
.

# skos:prefLabel ###############################################################

<Concept/skos_prefLabel#type>
  a sh:PropertyConstraint ;
  dc:type esc:type ;
  sh:description "Values for skos:prefLabel must be Literals" ;
  sh:predicate skos:prefLabel ;
  sh:nodeKind sh:Literal ;
.

<Concept/skos_prefLabel#datatype>
  a sh:PropertyConstraint ;
  dc:type esc:datatype ;
  sh:description "Ideally all skos:prefLabel should have a language tag" ;
  dc:relation "R-48-MISSING-LANGUAGE-TAGS" ;
  sh:filterShape [
      sh:property [
          sh:predicate skos:prefLabel ;
          sh:nodeKind sh:Literal ;
      ]
  ] ;
  sh:predicate skos:prefLabel ;
  sh:datatype rdf:langString ;
  sh:severity sh:Warning ;
.

<Concept/skos_prefLabel#cardinality>
  a sh:PropertyConstraint ;
  dc:type esc:cardinality ;
  sh:description "There must be at most one skos:prefLabel per language" ;
  dc:relation "R-211-CARDINALITY-CONSTRAINTS"
           , "R-49-PROPERTY-OCCURS-ONCE-PER-LANGUAGE-TAG" ;
  sh:predicate skos:prefLabel ;
  sh:minCount 0 ;
  sh:uniqueLang true ;
.

# skos:altLabel ################################################################

<Concept/skos_altLabel#type>
  a sh:PropertyConstraint ;
  sh:description "Values for skos:altLabel must be Literals" ;
  dc:type esc:type ;
  sh:predicate skos:altLabel ;
  sh:nodeKind sh:Literal ;
.

<Concept/skos_altLabel#datatype>
  a sh:PropertyConstraint ;
  dc:type esc:datatype ;
  sh:description "Ideally all skos:altLabel should have a language tag" ;
  dc:relation "R-48-MISSING-LANGUAGE-TAGS" ;
  sh:filterShape [
      sh:property [
          sh:predicate skos:altLabel ;
          sh:nodeKind sh:Literal ;
      ]
  ] ;
  sh:predicate skos:altLabel ;
  sh:datatype rdf:langString ;
  sh:severity sh:Warning ;
.

<Concept/skos_altLabel#redundancy>
  a sh:PropertyConstraint ;
  dc:type esc:redundancy ;
  sh:description """skos:altLabel should not have the same labels than in 
                    skos:prefLabel""" ;
  dc:relation "R-10-DEFINE-DISJOINT-PROPERTIES" ;
  sh:predicate  skos:altLabel ;
  sh:notEquals  skos:prefLabel ;
  sh:severity sh:Warning ;
.

# skos:broader #################################################################

<Concept/skos_broader#type>
  a sh:PropertyConstraint ;
  dc:type esc:type ;
  sh:description "Values for skos:broader must be Resources" ;
  sh:predicate skos:broader ;
  sh:nodeKind sh:IRI ;
.

<Concept/skos_broader#range-class>
  a sh:PropertyConstraint ;
  sh:description "skos:broader must refer to a valid skos:Concept" ;
  dc:type esc:range-class ;
  dc:relation "R-225-VALIDATION-OF-CLASS-ASSOCIATION" ;
  sh:filterShape [
      sh:property [
          sh:predicate skos:broader ;
#          sh:nodeKind sh:IRI ;
          sh:valueShape [
            sh:property [ sh:predicate rdf:type ; sh:minCount 1; ]
          ]
      ]
  ] ;
  sh:predicate skos:broader ;
  sh:valueShape Concept: ;
  sh:class edm:Concept ;
.

#<Concept/skos_broader#disjoint2>
#  a sh:Constraint ;
#  sh:description """skos:broader must be disjoint with: skos:narrower
#                  , skos:related, skos:broadMatch, skos:narrowMatch
#                  , skos:relatedMatch, skos:exactMatch, skos:closeMatch.""" ;
#  dc:type esc:disjoint ;
#  dc:relation "R-10-DEFINE-DISJOINT-PROPERTIES" ;
#  sh:severity sh:Warning ;
#  sh:and (
#    [ sh:property [ sh:predicate skos:broader ; sh:notEquals skos:narrower ;     ] ]
#    [ sh:property [ sh:predicate skos:broader ; sh:notEquals skos:related ;      ] ]
#    [ sh:property [ sh:predicate skos:broader ; sh:notEquals skos:broadMatch ;   ] ]
#    [ sh:property [ sh:predicate skos:broader ; sh:notEquals skos:narrowMatch ;  ] ]
#    [ sh:property [ sh:predicate skos:broader ; sh:notEquals skos:relatedMatch ; ] ]
#    [ sh:property [ sh:predicate skos:broader ; sh:notEquals skos:exactMatch ;   ] ]
#    [ sh:property [ sh:predicate skos:broader ; sh:notEquals skos:closeMatch ;   ] ]
#  );
#.

# skos:narrower ################################################################

<Concept/skos_narrower#type>
  a sh:PropertyConstraint ;
  dc:type esc:type ;
  sh:description "Values for skos:narrower must be Resources" ;
  sh:predicate skos:narrower ;
  sh:nodeKind sh:IRI ;
.

# skos:related #################################################################

<Concept/skos_related#type>
  a sh:PropertyConstraint ;
  dc:type esc:type ;
  sh:description "Values for skos:related must be Resources" ;
  sh:predicate skos:related ;
  sh:nodeKind sh:IRI ;
.

# skos:broadMatch ##############################################################

<Concept/skos_broadMatch#type>
  a sh:PropertyConstraint ;
  dc:type esc:type ;
  sh:description "Values for skos:broadMatch must be Resources" ;
  sh:predicate skos:broadMatch ;
  sh:nodeKind sh:IRI ;
.

# skos:narrowMatch #############################################################

<Concept/skos_narrowMatch#type>
  a sh:PropertyConstraint ;
  dc:type esc:type ;
  sh:description "Values for skos:narrowMatch must be Resources" ;
  sh:predicate skos:narrowMatch ;
  sh:nodeKind sh:IRI ;
.

# skos:relatedMatch ############################################################

<Concept/skos_relatedMatch#type>
  a sh:PropertyConstraint ;
  dc:type esc:type ;
  sh:description "Values for skos:relatedMatch must be Resources" ;
  sh:predicate skos:relatedMatch ;
  sh:nodeKind sh:IRI ;
.

# skos:exactMatch ##############################################################

<Concept/skos_exactMatch#type>
  a sh:PropertyConstraint ;
  dc:type esc:type ;
  sh:description "Values for skos:exactMatch must be Resources" ;
  sh:predicate skos:exactMatch ;
  sh:nodeKind sh:IRI ;
.

# skos:closeMatch ##############################################################

<Concept/skos_closeMatch#type>
  a sh:PropertyConstraint ;
  dc:type esc:type ;
  sh:description "Values for skos:closeMatch must be Resources" ;
  sh:predicate skos:closeMatch ;
  sh:nodeKind sh:IRI ;
.

# skos:note ####################################################################

<Concept/skos_note#type>
  a sh:PropertyConstraint ;
  dc:type esc:type ;
  sh:description "Values for skos:note must be Literals" ;
  sh:predicate skos:note ;
  sh:nodeKind sh:Literal ;
.

<Concept/skos_note#datatype>
  a sh:PropertyConstraint ;
  dc:type esc:datatype ;
  sh:description "Ideally all skos:note should have a language tag" ;
  dc:relation "R-48-MISSING-LANGUAGE-TAGS" ;
  sh:filterShape [
      sh:property [
          sh:predicate skos:note ;
          sh:nodeKind sh:Literal ;
      ]
  ] ;
  sh:predicate skos:note ;
  sh:datatype rdf:langString ;
  sh:severity sh:Warning ;
.

# skos:notation ################################################################

<Concept/skos_notation#type>
  a sh:PropertyConstraint ;
  dc:type esc:type ;
  sh:description "Values for skos:notation must be Literals" ;
  sh:predicate skos:notation ;
  sh:nodeKind sh:Literal ;
.

<Concept/skos_notation#datatype>
  a tpl:TypedLiteralConstraint ;
  sh:description "skos:notation should be assigned with a typed literal" ;
  dc:type esc:datatype ;
  sh:predicate skos:notation ;
.

# skos:inScheme ################################################################

<Concept/skos_inScheme#type>
  a sh:PropertyConstraint ;
  dc:type esc:type ;
  sh:description "Values for skos:inScheme must be Resources" ;
  sh:predicate skos:inScheme ;
  sh:nodeKind sh:IRI ;
.