@prefix sh:   <http://www.w3.org/ns/shacl#> .
@prefix xsd:  <http://www.w3.org/2001/XMLSchema#> .
@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix owl:  <http://www.w3.org/2002/07/owl#> .

@prefix :     <http://www.europeana.eu/schemas/edm/shapes/template#> .
@prefix etp:  <http://www.europeana.eu/schemas/edm/shapes/template#> .

################################################################################
#                         SHAPE TEMPLATE DEFINITIONS                           #
################################################################################

:
  rdf:type owl:Ontology, sh:Graph ;
  owl:versionInfo "Template Library for EDM"^^xsd:string ;
  sh:description "Template Library for EDM" ;

  sh:shapesGraph <http://www.w3.org/ns/shacl> ;
.

:RedundancyConstraint
    a sh:ConstraintTemplate ;
    rdfs:label "Co-occurrence constraint between nodes" ;
    rdfs:subClassOf sh:TemplateConstraint ;
    sh:argument [
        sh:predicate sh:predicate ;
        sh:class rdf:Property ;
        sh:name "predicate" ;
        sh:description "The property of the focus node." ;
    ] ;
    sh:argument [
        sh:predicate sh:scopeClass ;
        sh:class rdf:Class ;
        sh:name "scopeClass" ;
        sh:description "The class of the target node." ;
    ] ;
    sh:argument [
        sh:predicate sh:notEquals ;
        sh:class rdf:Property ;
        sh:name "notEquals" ;
        sh:description "The property of the target node." ;
    ] ;
    rdfs:comment "Duplicate values"^^xsd:string ;
    sh:message "Duplicate values" ;
    sh:sparql """
      SELECT ?this (?this as ?subject) $predicate ?value
      WHERE { ?node rdf:type ?scopeClass ; ?property  ?value .
              ?this                        ?notEquals ?value . }
    """ ;
.


:DisjointConstraint
    a sh:ConstraintTemplate ;
    rdfs:subClassOf sh:TemplateConstraint ;
    rdfs:label "Disjoint constraint between nodes" ;
    rdfs:comment "Tests if the range of a property is a typed literal";
    sh:argument [
        sh:predicate sh:predicate ;
        sh:class rdf:Property ;
        sh:name "predicate" ;
        sh:description "The property of the focus node." ;
    ] ;
    sh:argument [
        sh:predicate sh:disjointWith ;
        sh:class rdf:Property ;
        sh:name "disjointWith" ;
        sh:description "List of properties that the property must be disjoint with." ;
    ] ;
    sh:message "Not a typed literal" ;
    sh:sparql """
      SELECT $this ($this AS ?subject) $predicate (?value AS ?object)
      WHERE {
        $this $predicate ?value .
        FILTER (!isLiteral(?value) || NOT EXISTS {
            GRAPH $shapesGraph {
                $predicates (rdf:rest*)/rdf:first ?disjointWith .
            }
            FILTER (?disjointWith = rdfs:Resource
                || (?disjointWith = rdf:List && EXISTS { ?value rdf:first ?any }))
        })
      }
    """ ;
.

:TypedLiteralConstraint
    a sh:ConstraintTemplate ;
    rdfs:subClassOf sh:TemplateConstraint ;
    rdfs:label "Co-occurrence constraint between nodes" ;
    rdfs:comment "Tests if the range of a property is a typed literal";
    sh:argument [
        sh:predicate sh:predicate ;
        sh:class rdf:Property ;
        sh:name "predicate" ;
        sh:description "The property of the focus node." ;
    ] ;
    sh:message "Not a typed literal" ;
    sh:sparql """
      SELECT ?this (?this as ?subject) $predicate (?value AS ?object)
      WHERE {
        $this $predicate ?value .
        BIND (datatype(?value) AS ?dt) .
        FILTER ( isLiteral(?value) && ( (?dt = xsd:string)
                                     || (?dt = rdf:langString ) ) ) .
      }
    """ ;
.
