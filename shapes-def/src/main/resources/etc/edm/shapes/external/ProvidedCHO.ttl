@prefix sh:   <http://www.w3.org/ns/shacl#> .
@prefix xsd:  <http://www.w3.org/2001/XMLSchema#> .
@prefix dct:  <http://purl.org/dc/terms/> .
@prefix dc:   <http://purl.org/dc/elements/1.1/> .
@prefix ore:  <http://www.openarchives.org/ore/terms/> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix owl:  <http://www.w3.org/2002/07/owl#> .

@prefix edm:  <http://www.europeana.eu/schemas/edm/> .
@prefix esc:  <http://www.europeana.eu/schemas/edm/shapes/categories#> .
@prefix :     <http://www.europeana.eu/schemas/edm/shapes/external/ProvidedCHO#> .
@base         <http://www.europeana.eu/schemas/edm/shapes/external/ProvidedCHO/> .

@prefix Agent:    <http://www.europeana.eu/schemas/edm/shapes/external/Agent#base> .
@prefix Concept:  <http://www.europeana.eu/schemas/edm/shapes/external/Concept#base> .
@prefix Place:    <http://www.europeana.eu/schemas/edm/shapes/external/Place#base> .
@prefix TimeSpan: <http://www.europeana.eu/schemas/edm/shapes/external/TimeSpan#base> .

################################################################################
# Shape Graph for edm:ProvidedCHO
################################################################################

:
  rdf:type owl:Ontology, sh:Graph ;
  owl:versionInfo "Draft version for edm:ProvidedCHO Class"^^xsd:string ;
  sh:shapesGraph <http://www.w3.org/ns/shacl> ;
.

################################################################################
# Base Shape for the edm:ProvidedCHO Class
################################################################################

:base
  a sh:Shape ;
  rdfs:subClassOf rdfs:Resource ;
  sh:scopeClass edm:ProvidedCHO ;

  # class level constraints
  sh:constraint      :correlation ;

  # DC properties
  sh:property        <dc_contributor#cardinality> ;
  sh:property        <dc_contributor#range-class> ;
  sh:property        <dc_coverage#cardinality> ;
  sh:property        <dc_coverage#range-class> ;
  sh:property        <dc_coverage#subproperty_1> ;
  sh:constraint      <dc_coverage#subproperty_2> ;
  sh:property        <dc_creator#cardinality> ;
  sh:property        <dc_creator#range-class> ;
  sh:property        <dc_date#cardinality> ;
  sh:property        <dc_date#range-class> ;
  sh:property        <dc_date#literal> ;
  sh:property        <dc_date#subproperty_1> ;
  sh:constraint      <dc_date#subproperty_2> ;
  sh:property        <dc_description#cardinality> ;
  sh:property        <dc_format#cardinality> ;
  sh:property        <dc_identifier#type> ;
  sh:property        <dc_identifier#cardinality> ;
  sh:property        <dc_language#type> ;
  sh:property        <dc_language#cardinality> ;
  sh:property        <dc_language#values> ;
  sh:property        <dc_publisher#cardinality> ;
  sh:property        <dc_publisher#range-class> ;
  sh:property        <dc_rights#cardinality> ;
  sh:constraint      <dc_rights#subproperty> ;
  sh:property        <dc_subject#cardinality> ;
  sh:property        <dc_subject#range-class> ;
  sh:property        <dc_subject#multiplevalue> ;
  sh:property        <dc_title#type> ;
  sh:property        <dc_title#cardinality> ;
  sh:property        <dc_type#cardinality> ;
  sh:property        <dc_type#range-class> ;

  # DCTERMS properties
  sh:property        <dct_alternative#cardinality> ;
  sh:property        <dct_alternative#type> ;
  sh:constraint      <dct_alternative#subproperty> ;
  sh:property        <dct_conformsTo#cardinality> ;
  sh:property        <dct_created#cardinality> ;
  sh:property        <dct_created#range-values> ;
  sh:property        <dct_created#correlation> ;
  sh:property        <dct_extent#cardinality> ;
  sh:property        <dct_hasFormat#cardinality> ;
  sh:property        <dct_hasPart#cardinality> ;
  sh:property        <dct_hasVersion#cardinality> ;
  sh:property        <dct_isFormatOf#cardinality> ;
  sh:property        <dct_isPartOf#cardinality> ;
  sh:property        <dct_isReferencedBy#cardinality> ;
  sh:property        <dct_isReplacedBy#cardinality> ;
  sh:property        <dct_isRequiredBy#cardinality> ;
  sh:property        <dct_issued#cardinality> ;
  sh:property        <dct_isVersionOf#cardinality> ;
  sh:property        <dct_medium#cardinality> ;
  sh:property        <dct_provenance#cardinality> ;
  sh:property        <dct_references#cardinality> ;
  sh:property        <dct_replaces#cardinality> ;
  sh:property        <dct_requires#cardinality> ;
  sh:property        <dct_spatial#cardinality> ;
  sh:property        <dct_tableOfContents#type> ;
  sh:property        <dct_tableOfContents#cardinality> ;
  sh:property        <dct_temporal#cardinality> ;

  # EDM properties
  sh:inverseProperty <edm_aggregatedCHO#correlation> ;
  sh:property        <edm_currentLocation#type> ;
  sh:property        <edm_currentLocation#cardinality> ;
  sh:property        <edm_hasMet#type> ;
  sh:property        <edm_hasMet#cardinality> ;
  sh:property        <edm_hasMet#range-class> ;
  sh:property        <edm_hasType#cardinality> ;
  sh:property        <edm_incorporates#type> ;
  sh:property        <edm_incorporates#cardinality> ;
  sh:property        <edm_isDerivativeOf#type> ;
  sh:property        <edm_isDerivativeOf#cardinality> ;
  sh:property        <edm_isNextInSequence#type> ;
  sh:property        <edm_isNextInSequence#cardinality> ;
  sh:property        <edm_isNextInSequence#range-class> ;
  sh:property        <edm_isNextInSequence#correlation> ;
  sh:property        <edm_isRelatedTo#cardinality> ;
  sh:property        <edm_isRepresentationOf#type> ;
  sh:property        <edm_isRepresentationOf#cardinality> ;
  sh:property        <edm_isSimilarTo#type> ;
  sh:property        <edm_isSimilarTo#cardinality> ;
  sh:property        <edm_isSuccessorOf#type> ;
  sh:property        <edm_isSuccessorOf#cardinality> ;
  sh:property        <edm_realizes#type> ;
  sh:property        <edm_realizes#cardinality> ;
  sh:property        <edm_type#type> ;
  sh:property        <edm_type#cardinality> ;
  sh:property        <edm_type#values> ;
  sh:property        <edm_type#correlation> ;
  sh:property        <edm_unstored#type> ;
  sh:property        <edm_unstored#cardinality> ;
  sh:property        <edm_ugc#type> ;
  sh:property        <edm_ugc#cardinality> ;

  # OWL properties
  sh:property        <owl_sameAs#type> ;
  sh:property        <owl_sameAs#cardinality> ;
.


################################################################################
# All Constraint Declarations
################################################################################

<edm_aggregatedCHO#correlation>
  a sh:InversePropertyConstraint ;
  sh:description """Check that the URI of the ProvidedCHO and the URI described 
                    in edm:aggregatedCHO are the same.""" ;
  dc:type esc:correlation ;
  dc:subject "R-225-VALIDATION-OF-CLASS-ASSOCIATION" ;
  sh:predicate edm:aggregatedCHO ;
  sh:valueClass ore:Aggregation ;
  sh:minCount 1 ;
  sh:maxCount 1 ; #this enforces uniqueness
.

#:uniqueness ?

# the constraint for edm:type was taken out of this rule
:correlation
  a sh:Constraint ;
  sh:description """Check that if edm:ProvidedCHO is present, at least: one 
                    dc:title or sh:description should be present; one dc:subject
                    or dc:type or dc:coverage or dcterms:spatial and edm:type 
                    should be present""" ;
  dc:type esc:correlation ;
  dc:subject "R-68-REQUIRED-PROPERTIES" ;
  sh:message """At least: one dc:title or sh:description; one dc:subject or 
                dc:type or dc:coverage or dcterms:spatial; and one edm:type 
                should be present""" ;
  sh:and (
    [
      sh:constraint [
        sh:or (
          [ sh:property [ sh:predicate dc:title       ; sh:minCount 1 ; ] ]
          [ sh:property [ sh:predicate dc:description ; sh:minCount 1 ; ] ]
        )
      ]
    ]
    [
      sh:constraint [
        sh:or (
          [ sh:property [ sh:predicate dc:subject  ; sh:minCount 1 ; ] ]
          [ sh:property [ sh:predicate dc:type     ; sh:minCount 1 ; ] ]
          [ sh:property [ sh:predicate dc:coverage ; sh:minCount 1 ; ] ]
          [ sh:property [ sh:predicate dct:spatial ; sh:minCount 1 ; ] ]
        )
      ]
    ]
  ) ;
.


# dc:contributor ###############################################################

<dc_contributor#cardinality>
  a sh:PropertyConstraint ;
  dc:type esc:cardinality ;
  dc:subject "R-211-CARDINALITY-CONSTRAINTS" ;
  sh:predicate dc:contributor ;
  sh:minCount 0 ;
.

<dc_contributor#range-class>
  a sh:PropertyConstraint ;
  sh:description """the reference should be one to an Agent (the access to the 
                    data and the data itself should be formatted according to 
                    the Agent specifications.)""" ;
  dc:type esc:range-class ;
  dc:subject "R-171-VALIDATION-OF-URIS-BY-DEREFERENCING" ;  
  sh:predicate dc:contributor ;
  sh:filterShape [
    sh:property [
      sh:predicate dc:contributor ;
      sh:nodeKind sh:IRI ;
    ]
  ] ;
  sh:valueShape Agent: ;
.


# dc:coverage ##################################################################

<dc_coverage#cardinality>
  a sh:PropertyConstraint ;
  dc:type esc:cardinality ;
  dc:subject "R-211-CARDINALITY-CONSTRAINTS" ;
  sh:predicate dc:coverage ;
  sh:minCount 0 ;
.

<dc_coverage#range-class>
  a sh:PropertyConstraint ;
  sh:description """If the value is a URI, check if it refers to a TimeSpan or a
                    Place that is declared in the document.""" ;
  dc:type esc:range-class ;
  sh:predicate dc:coverage ;
  sh:filterShape [
    sh:property [
        sh:predicate dc:coverage ;
        sh:nodeKind sh:IRI ;
    ]
  ] ;
  sh:valueShape [
    sh:constraint [
      sh:or ( Place: TimeSpan: )
    ] ;
  ] ;
.

<dc_coverage#subproperty_1>
  a sh:PropertyConstraint ;
  sh:description """If two dc:coverage are present, suggest the use of 
                    dcterms:spatial or dcterms:temporal.""" ;
  dc:type esc:subproperty ;
  dc:subject "R-224-USE-SUB-SUPER-RELATIONS-IN-VALIDATION" ;
  sh:predicate dc:coverage ;
  sh:maxCount 1 ;
  sh:severity sh:Warning ;
  sh:message "Suggest the use of dcterms:spatial or dcterms:temporal" ;
.

<dc_coverage#subproperty_2>
  a sh:Constraint ;
  sh:description """If dc:coverage and dcterms:spatial or dcterms:temporal are 
                    present, check that the value in dc:coverage is not 
                    redundant with dcterms:spatial or dcterms:temporal for 
                    ingestion""" ;
  dc:type esc:subproperty ;
  dc:subject "R-224-USE-SUB-SUPER-RELATIONS-IN-VALIDATION" ;
  sh:severity sh:Warning ;
  sh:and (
    [
      sh:property [
        sh:predicate dc:coverage ;
        sh:notEquals dct:spatial ;
      ]
    ]
    [
      sh:property [
        sh:predicate dc:coverage ;
        sh:notEquals dct:temporal ;
      ]
    ]
  )
.


# dc:creator ###################################################################

<dc_creator#cardinality>
  a sh:PropertyConstraint ;
  dc:type esc:cardinality ;
  dc:subject "R-211-CARDINALITY-CONSTRAINTS" ;
  sh:predicate dc:creator ;
  sh:minCount 0 ;
.

<dc_creator#range-class>
  a sh:PropertyConstraint ;
  sh:description """the reference should be one to an Agent (the access to the 
                    data and the data itself should be formatted according to 
                    the Agent specifications.)""" ;
  dc:type esc:range-class ;
  dc:subject "R-171-VALIDATION-OF-URIS-BY-DEREFERENCING" ;
  sh:predicate dc:creator ;
  sh:filterShape [ #restrict only to nodes
      sh:property [
          sh:predicate dc:creator ;
          sh:nodeKind sh:IRI ;
      ]
  ] ;
  sh:valueShape Agent: ;
.


# dc:date ######################################################################

<dc_date#cardinality>
  a sh:PropertyConstraint ;
  dc:type esc:cardinality ;
  dc:subject "R-211-CARDINALITY-CONSTRAINTS" ;
  sh:predicate dc:date ;
  sh:minCount 0 ;
.

<dc_date#range-class>
  a sh:PropertyConstraint ;
  sh:description """the reference should be one to a TimeSpan (the access to 
                    the data and the data itself should be formatted according 
                    to the TimeSpan specifications.)""" ;
  dc:type esc:range-class ;
  dc:subject "R-171-VALIDATION-OF-URIS-BY-DEREFERENCING" ;  
  sh:predicate dc:date ;
  sh:filterShape [
      sh:property [
          sh:predicate dc:date ;
          sh:nodeKind sh:IRI ;
      ]
  ] ;
  sh:valueShape TimeSpan: ;
.

<dc_date#literal>
  a sh:PropertyConstraint ;
  sh:description """Check that the value for date matches ISO 8601 starting with
                    the year and hyphenating the day and month parts: 
                    YYYY-MM-DD""";
  dc:subject "R-44-PATTERN-MATCHING-ON-RDF-LITERALS" ;
  sh:predicate dc:date ;
  sh:filterShape [ #restrict only to Literals
      sh:property [
          sh:predicate dc:date ;
          sh:nodeKind sh:Literal ;
      ]
  ] ;
  #does not check for valid dates but could be expanded
  sh:pattern "^[0-9]{4}[-][0-9]{2}[-][0-9]{2}$" ;
.

<dc_date#subproperty_1>
  a sh:PropertyConstraint ;
  sh:description """If two dc:date are present, suggest the use of dcterms 
                    created or dcterms:issued.""" ;
  dc:type esc:subproperty ;
  dc:subject "R-224-USE-SUB-SUPER-RELATIONS-IN-VALIDATION" ;
  sh:predicate dc:date ;
  sh:maxCount 1 ;
  sh:severity sh:Warning ;
  sh:message "Suggest the use of dcterms:created or dcterms:issued" ;
.

<dc_date#subproperty_2>
  a sh:Constraint ;
  sh:description """If dc:date and dcterms:created or dcterms:issued are present
                    , check that the value in dc:date is not redundant with 
                    dcterms:created or dctersm:issued for ingestion""" ;
  dc:type esc:subproperty ;
  dc:subject "R-224-USE-SUB-SUPER-RELATIONS-IN-VALIDATION" ;
  sh:severity sh:Warning ;
  sh:and (
    [
      sh:predicate  dc:date ;
      sh:notEquals dct:created ;
    ]
    [
      sh:predicate dc:date ;
      sh:notEquals dct:issued ;
    ]
  )
.


# dc:description ###############################################################

<dc_description#cardinality>
  a sh:PropertyConstraint ;
  dc:type esc:cardinality ;
  dc:subject "R-211-CARDINALITY-CONSTRAINTS" ;
  sh:predicate dc:description ;
  sh:minCount 0 ;
.


# dc:format ####################################################################

<dc_format#cardinality>
  a sh:PropertyConstraint ;
  dc:type esc:cardinality ;
  dc:subject "R-211-CARDINALITY-CONSTRAINTS" ;
  sh:predicate dc:format ;
  sh:minCount 0 ;
.


# dc:identifier ################################################################

<dc_identifier#type>
  a sh:PropertyConstraint ;
  sh:predicate dc:identifier ;
  sh:nodeKind sh:Literal ;
.

<dc_identifier#cardinality>
  a sh:PropertyConstraint ;
  dc:type esc:cardinality ;
  dc:subject "R-211-CARDINALITY-CONSTRAINTS" ;
  sh:predicate dc:identifier ;
  sh:minCount 0 ;
.


# dc:language ##################################################################

<dc_language#type>
  a sh:PropertyConstraint ;
  sh:predicate dc:language ;
  sh:nodeKind sh:Literal ;
.

<dc_language#cardinality>
  a sh:PropertyConstraint ;
  dc:type esc:cardinality ;
  dc:subject "R-211-CARDINALITY-CONSTRAINTS" ;
  sh:predicate dc:language ;
  sh:minCount 0 ;
.

<dc_language#values>
  a sh:PropertyConstraint ;
  sh:description """Check that the value for language matches ISO 639 two-letter
                    code if it exists at http://www.loc.gov/standards/iso639-2/php/code_list.php
                    otherwise accept three-letter code.""" ;
  dc:subject "R-49-PROPERTY-OCCURS-ONCE-PER-LANGUAGE-TAG"
           , "R-47-SPECIFY-AND-VALIDATE-LANGUAGE-TAGS" ;
  sh:predicate dc:language ;
  #alternative is to have the full list of acceptable values
  sh:pattern "^[a-z]{2}$" ;
.


# dc:publisher #################################################################

<dc_publisher#cardinality>
  a sh:PropertyConstraint ;
  dc:type esc:cardinality ;
  dc:subject "R-211-CARDINALITY-CONSTRAINTS" ;
  sh:predicate dc:publisher ;
  sh:minCount 0 ;
.

<dc_publisher#range-class>
  a sh:PropertyConstraint ;
  sh:description """The reference should be one to an Agent( the access to the 
                    data and the data itself should be formatted according to 
                    the Agent specifications.)""" ;
  dc:type esc:range-class ;
  dc:subject "R-171-VALIDATION-OF-URIS-BY-DEREFERENCING" ;
  sh:predicate dc:publisher ;
  sh:filterShape [
    sh:property [
      sh:predicate dc:publisher ;
      sh:nodeKind sh:IRI ;
    ]
  ] ;
  sh:valueShape Agent: ;
.


# dc:rights ####################################################################

<dc_rights#cardinality>
  a sh:PropertyConstraint ;
  dc:type esc:cardinality ;
  dc:subject "R-211-CARDINALITY-CONSTRAINTS" ;
  sh:predicate dc:rights ;
  sh:minCount 0 ;
.

<dc_rights#subproperty>
  a sh:Constraint ;
  dc:type esc:subproperty ;
  sh:description """Check if dc:rights has the same value than edm:rights either
                    as rdf:resource or literal, if yes the field is 
                    redundant""" ;
  dc:subject "R-224-USE-SUB-SUPER-RELATIONS-IN-VALIDATION" ;
  sh:severity sh:Warning ;
  sh:predicate dc:rights ;
  sh:notEquals edm:rights ;
.


# dc:subject ###################################################################

<dc_subject#cardinality>
  a sh:PropertyConstraint ;
  dc:type esc:cardinality ;
  dc:subject "R-211-CARDINALITY-CONSTRAINTS" ;
  sh:predicate dc:subject ;
  sh:minCount 0 ;
.

<dc_subject#range-class>
  a sh:PropertyConstraint ;
  sh:description """The reference should be one to a Concept( the access to the
                    data and the data itself should be formatted according to 
                    the Concept specifications.)""" ;
  dc:type esc:range-class ;
  dc:subject "R-171-VALIDATION-OF-URIS-BY-DEREFERENCING" ;  
  sh:predicate dc:publisher ;
  sh:filterShape [ #restrict only to nodes
      sh:property [
          sh:predicate dc:subject ;
          sh:nodeKind sh:IRI ;
      ]
  ] ;
  sh:valueShape Concept: ;
.

<dc_subject#multiplevalue>
  a sh:PropertyConstraint ;

  sh:description """If more than one term is in the field, a new dc:subject 
                    should be created.""" ;
  dc:subject "R-224-USE-SUB-SUPER-RELATIONS-IN-VALIDATION" ;
  skos:note """The field is considered to have multiple terms if a separator is 
               detected""" ;
  sh:severity sh:Warning ;

  sh:predicate dc:subject ;
  sh:pattern "^.*[,;].*$" ; #check for char separators

  sh:message """More than one term was detected, suggest the use of a new 
                dc:subject field""" ;
.


# dc:title #####################################################################

<dc_title#type>
  a sh:PropertyConstraint ;
  dc:type esc:type ;
  dc:subject "R-211-CARDINALITY-CONSTRAINTS" ;
  sh:predicate dc:title ;
  sh:nodeKind sh:Literal ;
.

<dc_title#cardinality>
  a sh:PropertyConstraint ;
  dc:type esc:cardinality ;
  sh:predicate dc:title ;
  sh:minCount 0 ;
.


# dc:type ######################################################################

<dc_type#cardinality>
  a sh:PropertyConstraint ;
  dc:type esc:cardinality ;
  dc:subject "R-211-CARDINALITY-CONSTRAINTS" ;
  sh:predicate dc:type ;
  sh:minCount 0 ;
.

<dc_type#range-class>
  a sh:PropertyConstraint ;
  sh:description """If the value is a URI, check if a skos:Concept class is 
                    created.""" ;
#  sh:description """The reference should be one to a Concept( the access to the
#                    data and the data itself should be formatted according to 
#                    the Concept specifications.)""" ;
  dc:type esc:range-class ;
  dc:subject "R-171-VALIDATION-OF-URIS-BY-DEREFERENCING" ;
  sh:predicate dc:type ;
  sh:filterShape [
    sh:property [
      sh:predicate dc:type ;
      sh:nodeKind sh:IRI ;
      ]
  ] ;
  sh:valueShape Concept: ;
.


# dcterms:alternative ##########################################################

<dct_alternative#cardinality>
  a sh:PropertyConstraint ;
  dc:type esc:cardinality ;
  dc:subject "R-211-CARDINALITY-CONSTRAINTS" ;
  sh:predicate dct:alternative ;
  sh:minCount 0 ;
.

<dct_alternative#type>
  a sh:PropertyConstraint ;
  dc:type esc:type ;
  sh:predicate dct:alternative ;
  sh:nodeKind sh:Literal ;
.

<dct_alternative#subproperty>
  a sh:Constraint ;
  dc:type esc:subproperty ;
  sh:description """If dcterms:alternative has the same title than dc:title, 
                    then dcterms:alternative is redundant.""" ;
  dc:subject "R-224-USE-SUB-SUPER-RELATIONS-IN-VALIDATION" ;
  sh:severity sh:Warning ;
  sh:predicate dct:alternative ;
  sh:notEquals dc:title ;
  sh:message "Redundant dcterms:alternative" ;
.


# dcterms:conformsTo ###########################################################

<dct_conformsTo#cardinality>
  a sh:PropertyConstraint ;
  dc:type esc:cardinality ;
  dc:subject "R-211-CARDINALITY-CONSTRAINTS" ;
  sh:predicate dct:conformsTo ;
  sh:minCount 0 ;
.


# dcterms:created ##############################################################

<dct_created#cardinality>
  a sh:PropertyConstraint ;
  dc:type esc:cardinality ;
  dc:subject "R-211-CARDINALITY-CONSTRAINTS" ;
  sh:predicate dct:created ;
  sh:minCount 0 ;
.

<dct_created#range-values>
  a sh:PropertyConstraint ;
  sh:description """Check that the value for date matches ISO 8601 starting with
                    the year and hyphenating the day and month parts: 
                    YYYY-MM-DD""" ;
  dc:type esc:range-value ;
  dc:subject "R-44-PATTERN-MATCHING-ON-RDF-LITERALS" ;
  sh:filterShape [ #restrict only to Literals
    sh:property [
      sh:predicate dc:date ;
      sh:nodeKind sh:Literal ;
    ]
  ] ;
  #does not check for valid dates but could be expanded
  sh:pattern "^[0-9]{4}[-][0-9]{2}[-][0-9]{2}$" ;
.

#ISSUE: values need to be typed as xsd:date!
<dct_created#correlation>
  a sh:PropertyConstraint ;

  sh:description "dcterms:created must be equal or earlier than dcterms:issued";
#  sh:description """Check that dcterms:created is equal or earlier than 
#                    dcterms:issued""" ;
  dc:type esc:correlation ;
  dc:subject "R-43-LITERAL-VALUE-COMPARISON" ;

  sh:predicate dct:created ;
  sh:lessThan dct:issue ;
.


# dcterms:extent ###############################################################

<dct_extent#cardinality>
  a sh:PropertyConstraint ;
  dc:type esc:cardinality ;
  dc:subject "R-211-CARDINALITY-CONSTRAINTS" ;
  sh:predicate dct:extent ;
  sh:minCount 0 ;
.


# dcterms:hasFormat ############################################################

<dct_hasFormat#cardinality>
  a sh:PropertyConstraint ;
  dc:type esc:cardinality ;
  dc:subject "R-211-CARDINALITY-CONSTRAINTS" ;
  sh:predicate dct:hasFormat ;
  sh:minCount 0 ;
.


# dcterms:hasPart ##############################################################

<dct_hasPart#cardinality>
  a sh:PropertyConstraint ;
  dc:type esc:cardinality ;
  dc:subject "R-211-CARDINALITY-CONSTRAINTS" ;
  sh:predicate dct:hasPart ;
  sh:minCount 0 ;
.


# dcterms:hasVersion ###########################################################

<dct_hasVersion#cardinality>
  a sh:PropertyConstraint ;
  dc:type esc:cardinality ;
  dc:subject "R-211-CARDINALITY-CONSTRAINTS" ;
  sh:predicate dct:hasVersion ;
  sh:minCount 0 ;
.


# dcterms:isFormatOf ###########################################################

<dct_isFormatOf#cardinality>
  a sh:PropertyConstraint ;
  dc:type esc:cardinality ;
  dc:subject "R-211-CARDINALITY-CONSTRAINTS" ;
  sh:predicate dct:isFormatOf ;
  sh:minCount 0 ;
.


# dcterms:isPartOf #############################################################

<dct_isPartOf#cardinality>
  a sh:PropertyConstraint ;
  dc:type esc:cardinality ;
  dc:subject "R-211-CARDINALITY-CONSTRAINTS" ;
  sh:predicate dct:isPartOf ;
  sh:minCount 0 ;
.


# dcterms:isReferencedBy #######################################################

<dct_isReferencedBy#cardinality>
  a sh:PropertyConstraint ;
  dc:type esc:cardinality ;
  dc:subject "R-211-CARDINALITY-CONSTRAINTS" ;
  sh:predicate dct:isReferencedBy ;
  sh:minCount 0 ;
.


# dcterms:isReplacedBy #########################################################

<dct_isReplacedBy#cardinality>
  a sh:PropertyConstraint ;
  dc:type esc:cardinality ;
  dc:subject "R-211-CARDINALITY-CONSTRAINTS" ;
  sh:predicate dct:isReplacedBy ;
  sh:minCount 0 ;
.


# dcterms:isRequiredBy #########################################################

<dct_isRequiredBy#cardinality>
  a sh:PropertyConstraint ;
  dc:type esc:cardinality ;
  dc:subject "R-211-CARDINALITY-CONSTRAINTS" ;
  sh:predicate dct:isRequiredBy ;
  sh:minCount 0 ;
.


# dcterms:issued ###############################################################

<dct_issued#cardinality>
  a sh:PropertyConstraint ;
  dc:type esc:cardinality ;
  dc:subject "R-211-CARDINALITY-CONSTRAINTS" ;
  sh:predicate dct:issued ;
  sh:minCount 0 ;
.


# dcterms:isVersionOf ##########################################################

<dct_isVersionOf#cardinality>
  a sh:PropertyConstraint ;
  dc:type esc:cardinality ;
  dc:subject "R-211-CARDINALITY-CONSTRAINTS" ;
  sh:predicate dct:isVersionOf ;
  sh:minCount 0 ;
.


# dcterms:medium ###############################################################

<dct_medium#cardinality>
  a sh:PropertyConstraint ;
  dc:type esc:cardinality ;
  dc:subject "R-211-CARDINALITY-CONSTRAINTS" ;
  sh:predicate dct:medium ;
  sh:minCount 0 ;
.


# dcterms:provenance ###########################################################

<dct_provenance#cardinality>
  a sh:PropertyConstraint ;
  dc:type esc:cardinality ;
  dc:subject "R-211-CARDINALITY-CONSTRAINTS" ;
  sh:predicate dct:provenance ;
  sh:minCount 0 ;
.


# dcterms:references ###########################################################

<dct_references#cardinality>
  a sh:PropertyConstraint ;
  dc:type esc:cardinality ;
  dc:subject "R-211-CARDINALITY-CONSTRAINTS" ;
  sh:predicate dct:references ;
  sh:minCount 0 ;
.


# dcterms:replaces #############################################################

<dct_replaces#cardinality>
  a sh:PropertyConstraint ;
  dc:type esc:cardinality ;
  dc:subject "R-211-CARDINALITY-CONSTRAINTS" ;
  sh:predicate dct:replaces ;
  sh:minCount 0 ;
.


# dcterms:requires #############################################################

<dct_requires#cardinality>
  a sh:PropertyConstraint ;
  dc:type esc:cardinality ;
  dc:subject "R-211-CARDINALITY-CONSTRAINTS" ;
  sh:predicate dct:requires ;
  sh:minCount 0 ;
.


# dcterms:spatial ##############################################################

<dct_spatial#cardinality>
  a sh:PropertyConstraint ;
  dc:type esc:cardinality ;
  dc:subject "R-211-CARDINALITY-CONSTRAINTS" ;
  sh:predicate dct:spatial ;
  sh:minCount 0 ;
.


# dcterms:tableOfContents ######################################################

<dct_tableOfContents#type>
  a sh:PropertyConstraint ;
  dc:type esc:type ;
  sh:predicate dct:tableOfContents ;
  sh:nodeKind sh:Literal ;
.

<dct_tableOfContents#cardinality>
  a sh:PropertyConstraint ;
  dc:type esc:cardinality ;
  dc:subject "R-211-CARDINALITY-CONSTRAINTS" ;
  sh:predicate dct:tableOfContents ;
  sh:minCount 0 ;
.


# dcterms:temporal #############################################################

<dct_temporal#cardinality>
  a sh:PropertyConstraint ;
  dc:type esc:cardinality ;
  dc:subject "R-211-CARDINALITY-CONSTRAINTS" ;
  sh:predicate dct:temporal ;
  sh:minCount 0 ;
.


# edm:currentLocation ##########################################################

<edm_currentLocation#type>
  a sh:PropertyConstraint ;
  dc:type esc:type ;
  sh:predicate edm:currentLocation ;
  sh:nodeKind sh:IRI ;
.

<edm_currentLocation#cardinality>
  a sh:PropertyConstraint ;
  dc:type esc:cardinality ;
  dc:subject "R-211-CARDINALITY-CONSTRAINTS" ;
  sh:predicate edm:currentLocation ;
  sh:minCount 0 ;
.


# edm:hasMet ###################################################################

<edm_hasMet#type>
  a sh:PropertyConstraint ;
  dc:type esc:type ;
  sh:predicate edm:hasMet ;
  sh:nodeKind sh:IRI ;
.

<edm_hasMet#cardinality>
  a sh:PropertyConstraint ;
  dc:type esc:cardinality ;
  dc:subject "R-211-CARDINALITY-CONSTRAINTS" ;
  sh:predicate edm:hasMet ;
  sh:minCount 0 ;
.

<edm_hasMet#range-class>
  a sh:PropertyConstraint ;
  sh:description """A edm:hasMet should reference one of Agent, Place, TimeSpan 
                    or Concept that is declared in the record""" ;
# sh:description """the reference should be one to an Agent, a Place, a TimeSpan
#                   or a Concept ( the access to the data and the data itself 
#                   should be formatted according to the specifications of the 
#                   corresponding classes.)""" ;
  dc:type esc:range-class ;
  dc:subject "R-171-VALIDATION-OF-URIS-BY-DEREFERENCING" ;
  sh:or (
    [ sh:predicate dc:contributor ; sh:valueShape Agent:    ]
    [ sh:predicate dc:contributor ; sh:valueShape Place:    ]
    [ sh:predicate dc:contributor ; sh:valueShape TimeSpan: ]
    [ sh:predicate dc:contributor ; sh:valueShape Concept:  ]
  )
.


# edm:hasType ###################################################################

<edm_hasType#cardinality>
  a sh:PropertyConstraint ;
  dc:type esc:cardinality ;
  dc:subject "R-211-CARDINALITY-CONSTRAINTS" ;
  sh:predicate edm:hasType ;
  sh:minCount 0 ;
.


# edm:incorporates #############################################################

<edm_incorporates#type>
  a sh:PropertyConstraint ;
  dc:type esc:type ;
  sh:predicate edm:incorporates ;
  sh:nodeKind sh:IRI ;
.

<edm_incorporates#cardinality>
  a sh:PropertyConstraint ;
  dc:type esc:cardinality ;
  dc:subject "R-211-CARDINALITY-CONSTRAINTS" ;
  sh:predicate edm:incorporates ;
  sh:minCount 0 ;
.


# edm:isDerivativeOf ###########################################################

<edm_isDerivativeOf#type>
  a sh:PropertyConstraint ;
  dc:type esc:type ;
  sh:predicate edm:isDerivativeOf ;
  sh:nodeKind sh:IRI ;
.

<edm_isDerivativeOf#cardinality>
  a sh:PropertyConstraint ;
  dc:type esc:cardinality ;
  dc:subject "R-211-CARDINALITY-CONSTRAINTS" ;
  sh:predicate edm:isDerivativeOf ;
  sh:minCount 0 ;
.


# edm:isNextInSequence #########################################################

<edm_isNextInSequence#type>
  a sh:PropertyConstraint ;
  dc:type esc:type ;
  sh:predicate edm:isNextInSequence ;
  sh:nodeKind sh:IRI ;
.

<edm_isNextInSequence#cardinality>
  a sh:PropertyConstraint ;
  dc:type esc:cardinality ;
  dc:subject "R-211-CARDINALITY-CONSTRAINTS" ;
  sh:predicate edm:isNextInSequence ;
  sh:minCount 0 ;
.

# Issue requires the full dataset
<edm_isNextInSequence#range-class>
  a sh:PropertyConstraint ;
  sh:description """The reference should be a valid edm:ProvidedCHO""" ;
  dc:type esc:range-class ;
  dc:subject "R-171-VALIDATION-OF-URIS-BY-DEREFERENCING"
           , "R-225-VALIDATION-OF-CLASS-ASSOCIATION" ;  
  sh:predicate edm:isNextInSequence ;
.

# Implement using a SPARQL query
# Requires the full dataset
<edm_isNextInSequence#correlation>
  a sh:PropertyConstraint ;
  dc:type esc:correlation ;
  sh:description """The ProvidedCHO referred to by this property must share 
                    the same parent""" ;
  dc:subject "?" ;
  sh:predicate edm:isNextInSequence ;
.


# edm:isRelatedTo ##############################################################

<edm_isRelatedTo#cardinality>
  a sh:PropertyConstraint ;
  dc:type esc:cardinality ;
  dc:subject "R-211-CARDINALITY-CONSTRAINTS" ;
  sh:predicate edm:isRelatedTo ;
  sh:minCount 0 ;
.


# edm:isRepresentationOf #######################################################

<edm_isRepresentationOf#type>
  a sh:PropertyConstraint ;
  dc:type esc:type ;
  sh:predicate edm:isRepresentationOf ;
  sh:nodeKind sh:IRI ;
.

<edm_isRepresentationOf#cardinality>
  a sh:PropertyConstraint ;
  dc:type esc:cardinality ;
  dc:subject "R-211-CARDINALITY-CONSTRAINTS" ;
  sh:predicate edm:isRepresentationOf ;
  sh:minCount 0 ;
  sh:maxCount 1 ;
.


# edm:isSimilarTo ##############################################################

<edm_isSimilarTo#type>
  a sh:PropertyConstraint ;
  dc:type esc:type ;
  sh:predicate edm:isSimilarTo ;
  sh:nodeKind sh:IRI ;
.

<edm_isSimilarTo#cardinality>
  a sh:PropertyConstraint ;
  dc:type esc:cardinality ;
  dc:subject "R-211-CARDINALITY-CONSTRAINTS" ;
  sh:predicate edm:isSimilarTo ;
  sh:minCount 0 ;
.


# edm:isSuccessorOf ############################################################

<edm_isSuccessorOf#type>
  a sh:PropertyConstraint ;
  dc:type esc:type ;
  sh:predicate edm:isSuccessorOf ;
  sh:nodeKind sh:IRI ;
.

<edm_isSuccessorOf#cardinality>
  a sh:PropertyConstraint ;
  dc:type esc:cardinality ;
  dc:subject "R-211-CARDINALITY-CONSTRAINTS" ;
  sh:predicate edm:isSuccessorOf ;
  sh:minCount 0 ;
.


# edm:realizes #################################################################

<edm_realizes#type>
  a sh:PropertyConstraint ;
  dc:type esc:type ;
  sh:predicate edm:realizes ;
  sh:nodeKind sh:IRI ;
.

<edm_realizes#cardinality>
  a sh:PropertyConstraint ;
  dc:type esc:cardinality ;
  dc:subject "R-211-CARDINALITY-CONSTRAINTS" ;
  sh:predicate edm:realizes ;
  sh:minCount 0 ;
.


# edm:type #####################################################################

<edm_type#type>
  a sh:PropertyConstraint ;
  dc:type esc:type ;
  sh:predicate edm:type ;
  sh:nodeKind sh:Literal ;
.

<edm_type#cardinality>
  a sh:PropertyConstraint ;
  dc:type esc:cardinality ;
  dc:subject "R-211-CARDINALITY-CONSTRAINTS" ;
  sh:predicate edm:type ;
  sh:minCount 1 ;
  sh:maxCount 1 ;
.

<edm_type#values>
  a sh:PropertyConstraint ;
  dc:type esc:values ;
  sh:description """The value of edm:type must match one of: 
                    TEXT, VIDEO, SOUND, IMAGE, 3D""" ;
# sh:description """Check that edm:type matches the value 
#                   TEXT, VIDEO, SOUND, IMAGE, 3D""" ;
  dc:subject "R-30-DEFINE-VALUE-LISTS" ;
  sh:predicate edm:type ;
  sh:in ( "TEXT" "VIDEO" "SOUND" "IMAGE" "3D" ) ;
.

<edm_type#correlation>
  a sh:PropertyConstraint ;
# sh:description """Check that if the value of edm:type  is 3D the syntax of 
#                   dc:format is 3D-PDF """ ;
  sh:description """If the value of edm:type is '3D' then the syntax of 
                    dc:format must be '3D-PDF'""";
  dc:type esc:correlation ;
  dc:subject "R-44-PATTERN-MATCHING-ON-RDF-LITERALS" ;
  sh:filterShape [
    sh:property [
      sh:predicate edm:type ;
      sh:hasValue "3D" ;
    ]
  ] ;
  sh:predicate dc:format ;
  sh:hasValue "3D-PDF" ;
.


# edm:unstored #################################################################

<edm_unstored#type>
  a sh:PropertyConstraint ;
  dc:type esc:type ;
  sh:predicate edm:unstored ;
  sh:nodeKind sh:Literal ;
.

<edm_unstored#cardinality>
  a sh:PropertyConstraint ;
  dc:type esc:cardinality ;
  dc:subject "R-211-CARDINALITY-CONSTRAINTS" ;
  sh:predicate edm:unstored ;
  sh:minCount 0 ;
.


# edm:ugc ######################################################################

<edm_ugc#type>
  a sh:PropertyConstraint ;
  dc:type esc:type ;
  sh:predicate edm:ugc ;
  sh:nodeKind sh:Literal ;
.

<edm_ugc#cardinality>
  a sh:PropertyConstraint ;
  dc:type esc:cardinality ;
  dc:subject "R-211-CARDINALITY-CONSTRAINTS" ;
  sh:predicate edm:ugc ;
  sh:minCount 0 ;
.


# owl:sameAs ###################################################################

<owl_sameAs#type>
  a sh:PropertyConstraint ;
  dc:type esc:type ;
  sh:predicate owl:sameAs ;
  sh:nodeKind sh:IRI ;
.

<owl_sameAs#cardinality>
  a sh:PropertyConstraint ;
  dc:type esc:cardinality ;
  dc:subject "R-211-CARDINALITY-CONSTRAINTS" ;
  sh:predicate owl:sameAs ;
  sh:minCount 0 ;
.

